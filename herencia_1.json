{"_id": "/activity/7330df52-8b90-11e7-9249-0401663b8331", "uri": "/activity/7330df52-8b90-11e7-9249-0401663b8331", "publisher": null, "level": "principiante", "rights": "Attribution-ShareAlike 4.0 International", "description": "Definici\u00f3n de herencia con ejemplos en c#", "icon": "file", "author": "Mario Garc\u00eda Valdez", "tags": ["clase", "csharp", "frontpage"], "image_url": null, "title": "Herencia", "type": "text", "external_url": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "author_image": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "content": "<p>La herencia es uno de los conceptos fundamentales del modelo orientado a objetos. \nNos permite crear nuevas clases estableciendo una relaci\u00f3n jerarqu\u00edca <strong>tipo de</strong>, \nque va de una clase m\u00e1s general a otra m\u00e1s espec\u00edfica.  </p>\n<p>La herencia permite a los dise\u00f1adores definir nuevas clases a partir otras\nclases o de toda una jerarqu\u00eda de clases preexistente (ya comprobadas y\nverificadas) evitando con ello el redise\u00f1o, la modificaci\u00f3n y verificaci\u00f3n de\nla parte ya implementada <sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>. La clase m\u00e1s general, de la cual se heredan los\nmiembros la denominamos la <strong>clase base</strong> y a la que hereda la <strong>clase\nderivada</strong>. Decimos que la clase derivada es una especializaci\u00f3n de la clase\nbase. </p>\n<p>La clase derivada obtiene impl\u00edcitamente todos los miembros de la clase base,\nexcepto aquellos que son <code>private</code>, sus constructores y finalizadores. La\nventaja principal es que la clase derivada <strong>reutiliza el c\u00f3digo</strong> de la clase\nbase sin tener que volver a implementarlo. Lo normal es que en la clase\nderivada agregemos m\u00e1s miembros que la <strong>especializan</strong> ampliando la\nfuncionalidad de la clase base. Adem\u00e1s de extender la funcionalidad de la clase\nbase, tambi\u00e9n podemos <strong>redifinir sus m\u00e9todos</strong>, cambiando o especializando el\nfuncionamiento definido de manera m\u00e1s general en la clase base. </p>\n<p>Veamos un ejemplo. Primero vamos a definir la clase base, en este caso una clase \nllamada Persona, con dos atributos que todas las personas podemos tener, un identificador\ny nuestro nombre. Este es un fragmento, pero puedes incluirlo en un programa.</p>\n<pre><code class=\"language-csharp\">// Clase Base\nclass Persona \n{ \n  // Propiedades\n  public int ID { get; set;}\n  public string Nombre { get; set;}\n}\n\n// Constructor por defecto. En caso de que una clase derivada no invoque el \n// constructor de la clase base explicitamente, este constructor se ejecutar\u00e1\n// implicitamente.\npublic Persona()\n{\n  ID = 0;\n  Nombre = &quot;Fulano de Tal&quot;;\n}\n\n// Constructor de instancia con los dos par\u00e1metros necesarios para\n// incializar el estado de un objeto.\npublic Persona( int ID, string nombre)\n{\n this.ID = ID // Ocupamos this por que la variable local del par\u00e1metro ID\n              // se llama igual que el miembro ID.\n Nombre = nombre;\n}\n\n// M\u00e9todo que imprime los datos de la persona \n// Este m\u00e9todo lo vamos a mejorar m\u00e1s adelante\npublic void ImprimePersona()\n{\n  Console.WriteLine($&quot;{ID} {Nombre}&quot;)\n}\n</code></pre>\n<p>Ya que definimos la clase base, ahora podemos crear una clase derivada. En este\ncaso vamos a definir a la clase <code>Alumno</code> que representa a los alumnos. Si te\nfijas, los alumnos somos un <strong>tipo de</strong> persona. La sint\u00e1xis para indicar que vamos\na heredar de una clase es simplemente incluir despu\u00e9s del nombre de la clase derivada \ndos puntos y la clase base de esta menera: <code>class Derivada:ClaseBase</code>.</p>\n<p>Debemos tomar en cuenta que al heredar de <code>Persona</code> ya se tienen de manera impl\u00edcita las\npropiedades de <code>ID</code> y <code>Nombre</code> por lo que solo vamos a a\u00f1adir las propiedades de <code>Carrera</code> y \n<code>NumControl</code>. El N\u00famero de Control es un identificadoer escolar y puede contener letras, as\u00ed que \ndebe ser de tipo <code>string</code>. Nuestra clase derivada se ver\u00eda de esta manera hasta este momento. Cuidado,\nnos falta agregar los constructores y otros m\u00e9todos.</p>\n<pre><code>class Alumno:Persona\n{\n  public string NumControl { get; set;}\n  public string Carrera { get; set;}\n}\n</code></pre>\n<h3>Constructores en las clases derivadas</h3>\n<p>Antes de agregar un constructor a la clase derivada, debemos reflexionar sobre un detalle.\nEl contructor de la clase derivada tambi\u00e9n debe considerar a los atributos heredados, y \nsiguiendo con el principio, tambi\u00e9n reutilizar el contructor correspondiente en la clase base.\nEsto es tan importante que en C# se sigue una sint\u00e1xis especial para realizar esto. Siguiendo con \nel ejemplo:</p>\n<pre><code>class Alumno:Persona\n{\n  public string NumControl { get; set;}\n  public string Carrera { get; set;}\n\n  public Alumno( int ID, string nombre, string nc, string c):base(ID, nombre) // Se utiliza `base` \n  {\n    NumControl = nc; \n    Carrera = c;\n  }\n}\n</code></pre>\n<p>Como podemos observar en el fragmento de c\u00f3digo, al terminar la definici\u00f3n de los par\u00e1metros del \nconstructor se agrega la ejecuci\u00f3n del constructor de la clase Persona referenciada con la \npalabra reservada <code>base</code>. Nunca utilizamos literalmente el nombre de la clase base, siempre lo hacemos\nutilizando la referencia <code>base</code>. En este caso, le pasamos al constructor los dos par\u00e1metros que \nnecesita el <code>ID</code> y el <code>Nombre</code>. En el cuerpo del constructor inicializamos solamente los atributos \nparticulares de la clase <code>Alumno</code>. </p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>P\u00e1rrafo adaptado de <a href=\"https://es.wikipedia.org/wiki/Herencia_(inform%C3%A1tica)\">wikipedia</a> Licencia Creative Commons Atribuci\u00f3n Compartir Igual 3.0&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>"}