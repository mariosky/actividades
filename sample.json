{"_id": "/program/f0350c5a-f324-11ec-b939-0242ac120003", "uri": "/program/f0350c5a-f324-11ec-b939-0242ac120003", "publisher": null, "level": "principiante", "rights": "Attribution-ShareAlike 4.0 International", "description": "Este es el primer ejemplo de un programa desde archivos", "icon": "coffee", "author": "mariosky@gmail.com", "tags": ["frontpage", "csharp"], "image_url": null, "title": "Problema Peliculas", "type": "prog", "lang": "csharp", "external_url": "https://sfo2.digitaloceanspaces.com/evo/uno/autores/mario.jpg", "unit_test": "public class UnitTest1\n    {\n        [Fact]\n        public void GetSetPelicula()\n        {\n            var p1 = new Pelicula();\n            p1.SetTitulo(\"La La Land\");\n            p1.SetA\u00f1o(2016);\n\n            Assert.Equal(\"La La Land\", p1.GetTitulo());\n            Assert.Equal(2016 , p1.GetA\u00f1o());\n        }\n\n        [Fact]\n        public void ConstructorPelicula()\n        {\n            var p1 = new Pelicula();\n            var p2 = new Pelicula(\"La La Land\", 2016);\n\n            Assert.NotNull(p1);\n            Assert.NotNull(p2);\n            \n        }\n\n        [Fact]\n        public void ImprimePelicula()\n        {\n            \n            using (StringWriter s = new StringWriter())\n            {\n                Console.SetOut(s);\n                var p2 = new Pelicula(\"La La Land\", 2016);\n                p2.Imprime();\n\n                var result = s.ToString().Trim();\n                Assert.Equal(\"La La Land (2016)\", result);\n            }\n        }\n\n        [Fact]\n        public void ImprimeActores()\n        {\n\n            Pelicula p1 = new Pelicula(\"La La Land\", 2016);\n            p1.AgregaActor(new Actor(\"Ryan Gosling\", 1980));\n            p1.AgregaActor(new Actor(\"Emma Stone\", 1988));\n\n            \n\n            \n\n            using (StringWriter s = new StringWriter())\n            {\n                Console.SetOut(s);\n                \n                p1.ImprimeActores();\n\n                var result = s.ToString().Trim().Replace(\"\\r\",\"\");\n                Assert.Equal(\"Ryan Gosling (1980)\\nEmma Stone (1988)\", result );\n            }\n        }\n    }\n\n", "initial_code": "using System;\nusing System.IO;\nusing System.Collections.Generic;\nnamespace test;\n\n    public class Pelicula\n    {\n        //Campos\n        private String titulo;\n        private Int16 a\u00f1o;\n        private String pa\u00eds;\n        private String director;\n        private List<Actor> actores = new List<Actor>();\n\n        //Constructores\n        public Pelicula()\n        {\n\n        } \n        public Pelicula(string titulo, Int16 a\u00f1o )\n        {\n            this.titulo = titulo;\n            this.a\u00f1o = a\u00f1o;\n        }\n        //M\u00e9todos\n        public String GetTitulo() => titulo;\n        public void SetTitulo(String titulo) => this.titulo = titulo;\n        public Int16 GetA\u00f1o() => a\u00f1o;\n        public void SetA\u00f1o(Int16 a\u00f1o) => this.a\u00f1o = a\u00f1o;\n        public void Imprime()\n        {\n            Console.WriteLine($\"{titulo} ({a\u00f1o})\");\n        }\n\n        public void AgregaActor(Actor a)\n        {\n            actores.Add(a);\n        }\n\n        public void ImprimeActores()\n        {\n            foreach(var a in actores)\n                a.Imprime();\n        }\n\n    }\n\n    public class Actor\n    {\n        //Propiedades\n        public String Nombre {get; set;}\n        public Int16 A\u00f1o {get; set;}\n        //Constructores\n        public Actor(String nombre, Int16 a\u00f1o){\n            Nombre = nombre;\n            A\u00f1o = a\u00f1o;\n        } \n\n        //M\u00e9todos \n        public void Imprime()\n        {\n            Console.WriteLine($\"{Nombre} ({A\u00f1o})\");\n        }\n    }\n\n\n", "instructions": "<h1>In this code there is some problems</h1>\n<p>Cuando creamos un objeto, debemos establecer cual ser\u00e1 su estado inicial. Recordemos que\nel estado inicial de un objeto est\u00e1 dado por los valores actuales de sus propiedades.</p>\n<h3>Sintaxis para crear un constructor</h3>\n<p>Un constructor <em>el nombre est\u00e1 dado por el de la clase.</em></p>\n<pre><code class=\"language-python\">def foo(a, b):\n  return a + b\n</code></pre>\n<pre class=\"line-numbers\"><code class=\"language-language-csharp\">class Clase \n{\n  int campo;\n}\n</code></pre>\n<pre class=\"line-numbers\"><code class=\"language-language-python\">class Clase \n{\n  int campo;\n}\n</code></pre>\n<p><code>python {.language-python .line-numbers}\nclass Clase \n  def __init__(self, o):\n      self.o = o</code></p>", "reg_exp": ""}